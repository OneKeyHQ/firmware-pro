from common import *
import json

if not utils.BITCOIN_ONLY:
    from apps.ur_registry import account


@unittest.skipUnless(not utils.BITCOIN_ONLY, "altcoin")
class TestCryptoHdPKeyEncode(unittest.TestCase):
    def test_parse_crypto_hd_key(self):
        hd_key_cbor = unhexlify("a902f403582102cc6d7834204653ff10e0047a2395343cc6df081e76c88d5eee83f346f0b21cb7045820712a9187e5c60c573a5acce855445376e1b74c240e417fe8cb2a8fdfd78d2d9d05d90131a201183c020006d90130a30186182cf5183cf500f5021af23f9fd2030307d90130a2018400f480f40300081a483c932809684b657973746f6e650a706163636f756e742e7374616e64617264")

        resp = account.Account.parse_crypto_hd_key("crypto-hdkey", hd_key_cbor)
        resp_json = json.loads(resp)
        self.assertEqual(resp_json["chain"], "ETH")
        self.assertEqual(resp_json["path"], "m/44'/60'/0'")
        self.assertEqual(resp_json["public_key"], "02cc6d7834204653ff10e0047a2395343cc6df081e76c88d5eee83f346f0b21cb7")
        self.assertEqual(resp_json["name"], "Keystone")
        self.assertEqual(resp_json["chain_code"], "712a9187e5c60c573a5acce855445376e1b74c240e417fe8cb2a8fdfd78d2d9d")
        self.assertEqual(resp_json["extended_public_key"], "xpub6CBZfsQuZgVnvTcScAAXSxtX5jdMHtX5LdRuygnTScMBbKyjsxznd8XMEqDntdY1jigmjunwRwHsQs3xusYQBVFbvLdN4YLzH8caLSSiAoV")
        self.assertEqual(resp_json["note"], "account.standard")
        self.assertEqual(resp_json["xfp"], "f23f9fd2")
        self.assertEqual(resp_json["extra"], {'okx': {'chain_id': 1}})

    def test_parse_crypto_hd_key_wrong_type(self):
        hd_key_cbor = unhexlify
        resp = account.Account.parse_crypto_hd_key("crypto-account", hd_key_cbor)
        self.assertEqual(resp, '{"error": "type not match"}')

if __name__ == '__main__':
    unittest.main()
